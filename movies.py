# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/121BG43TaBWWicsDLxNmXDrTe7SKOdJS5
"""

!pip install -q datasets sentence-transformers faiss-cpu transformers

import numpy as np
from sentence_transformers import SentenceTransformer
from transformers import pipeline
import faiss
import random

movies = [
    {"title": "Interstellar", "description": "A team of explorers travel through a wormhole in space.", "genres": ["sci-fi", "drama"]},
    {"title": "The Notebook", "description": "A romantic drama about two lovers in 1940s America.", "genres": ["romance", "drama"]},
    {"title": "Inception", "description": "A thief who steals corporate secrets through dream-sharing technology.", "genres": ["action", "sci-fi"]},
    {"title": "Inside Out", "description": "Personified emotions guide a young girl through change.", "genres": ["animation", "family"]},
    {"title": "John Wick", "description": "A retired hitman seeks vengeance for his dog's death.", "genres": ["action", "thriller"]},
    {"title": "The Grand Budapest Hotel", "description": "A whimsical tale of a legendary concierge at a famous hotel.", "genres": ["comedy", "adventure"]},
    {"title": "Her", "description": "A man falls in love with an AI operating system.", "genres": ["romance", "sci-fi"]},
    {"title": "Shutter Island", "description": "A U.S. Marshal investigates a disappearance at a mental hospital.", "genres": ["thriller", "mystery"]},
]

model = SentenceTransformer('all-MiniLM-L6-v2')

descriptions = [movie["description"] for movie in movies]
movie_embeddings = model.encode(descriptions, show_progress_bar=True)

index = faiss.IndexFlatL2(movie_embeddings.shape[1])
index.add(np.array(movie_embeddings))

emotion_classifier = pipeline(
    "text-classification",
    model="j-hartmann/emotion-english-distilroberta-base",
    top_k=1
)

def classify_emotion(text):
    result = emotion_classifier(text)
    if isinstance(result, list) and isinstance(result[0], list):
        return result[0][0]['label']
    return "neutral"

def parse_preferences(user_input):
    emotion = classify_emotion(user_input)
    return {
        "input": user_input,
        "emotion": emotion.lower(),
        "genres_hint": map_emotion_to_genres(emotion.lower())
    }

def map_emotion_to_genres(emotion):
    mapping = {
        "joy": ["comedy", "romance", "adventure"],
        "sadness": ["drama", "romance"],
        "anger": ["action", "thriller"],
        "fear": ["thriller", "mystery", "horror"],
        "love": ["romance", "drama"],
        "surprise": ["sci-fi", "mystery"],
        "neutral": ["drama", "comedy"],
    }
    return mapping.get(emotion, ["drama"])

def recommend_movies(user_input, top_k=3):
    prefs = parse_preferences(user_input)
    user_vector = model.encode([prefs["input"]])

    D, I = index.search(user_vector, len(movies))
    recommendations = []

    for i in I[0]:
        movie = movies[i]
        if any(genre in prefs["genres_hint"] for genre in movie["genres"]):
            recommendations.append(movie)
        if len(recommendations) == top_k:
            break

    if len(recommendations) < top_k:
        for i in I[0]:
            movie = movies[i]
            if movie not in recommendations:
                recommendations.append(movie)
            if len(recommendations) == top_k:
                break

    return recommendations, prefs

generator = pipeline("text-generation", model="gpt2", truncation=True, pad_token_id=50256)

def explain_recommendation(user_input, movie_title, movie_desc, emotion, genres):
    prompt = f"""User feels {emotion} and prefers genres: {', '.join(genres)}.
They are looking for something like: "{user_input}"

Why is the movie "{movie_title}" ({movie_desc}) a good choice?"""

    output = generator(prompt, max_length=80, truncation=True, num_return_sequences=3, top_k=50, top_p=0.95, temperature=0.9)
    return output[0]['generated_text'].replace(prompt, "").strip()

def ai_movie_assistant(user_input):
    recommendations, prefs = recommend_movies(user_input)

    print(f"\nEmotion detected: {prefs['emotion'].capitalize()}")
    print(f"Preferred genres: {', '.join(prefs['genres_hint'])}\n")

    for idx, movie in enumerate(recommendations, 1):
        explanation = explain_recommendation(
          user_input, movie['title'], movie['description'],
          prefs['emotion'], prefs['genres_hint']
        )

        print(f"{idx}. {movie['title']} â€” {movie['description']}")
        print(f"Why? {explanation}\n{'-'*60}")

ai_movie_assistant("I feel a bit nostalgic and want something heartwarming.")









