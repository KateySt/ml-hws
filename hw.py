# -*- coding: utf-8 -*-
"""hw.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xXyzDP939-pflLmDT9ScMHdlBwHiewpy
"""

import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler

data = yf.download("TSLA", start="2018-01-01", end="2023-01-01")
prices = data["Close"].values.reshape(-1, 1)

scaler = MinMaxScaler(feature_range=(0,1))
prices_scaled = scaler.fit_transform(prices)

X_train, y_train = [], []
window_size = 60

for i in range(window_size, len(prices_scaled)):
    X_train.append(prices_scaled[i-window_size:i, 0])
    y_train.append(prices_scaled[i, 0])

X_train, y_train = np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

model = Sequential([
    LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)),
    Dropout(0.2),
    LSTM(units=50, return_sequences=False),
    Dropout(0.2),
    Dense(units=25),
    Dense(units=1)
])

model.compile(optimizer="adam", loss="mean_squared_error")
model.fit(X_train, y_train, epochs=50, batch_size=32)

test_data = prices_scaled[-window_size:]
test_data = np.reshape(test_data, (1, window_size, 1))
predicted_price = model.predict(test_data)
predicted_price = scaler.inverse_transform(predicted_price)

print(f"{predicted_price[0][0]:.2f} USD")

-----

import numpy as np
import pandas as pd
import yfinance as yf
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt

btc_data = yf.download("BTC-USD", start="2018-01-01", end="2023-01-01")
prices = btc_data["Close"].values.reshape(-1, 1)

scaler = MinMaxScaler(feature_range=(0,1))
prices_scaled = scaler.fit_transform(prices)

X_train, y_train = [], []
window_size = 60

for i in range(window_size, len(prices_scaled)):
    X_train.append(prices_scaled[i-window_size:i, 0])
    y_train.append(prices_scaled[i, 0])

X_train, y_train = np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

model = Sequential([
    LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)),
    Dropout(0.2),
    LSTM(units=50, return_sequences=False),
    Dropout(0.2),
    Dense(units=25),
    Dense(units=1)
])

model.compile(optimizer="adam", loss="mean_squared_error")
model.fit(X_train, y_train, epochs=50, batch_size=32)

test_data = prices_scaled[-window_size:]
test_data = np.reshape(test_data, (1, window_size, 1))
predicted_price = model.predict(test_data)
predicted_price = scaler.inverse_transform(predicted_price)

print(f"{predicted_price[0][0]:.2f} USD")

import numpy as np
import pandas as pd
import yfinance as yf
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt

btc_data = yf.download("BTC-USD", start="2018-01-01", end="2023-01-01")
prices = btc_data["Close"].values.reshape(-1, 1)

scaler = MinMaxScaler(feature_range=(0,1))
prices_scaled = scaler.fit_transform(prices)

X_train, y_train = [], []
window_size = 60

for i in range(window_size, len(prices_scaled)):
    X_train.append(prices_scaled[i-window_size:i, 0])
    y_train.append(prices_scaled[i, 0])

X_train, y_train = np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

model = Sequential([
    LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)),
    Dropout(0.2),
    LSTM(units=50, return_sequences=False),
    Dropout(0.2),
    Dense(units=25),
    Dense(units=1)
])

model.compile(optimizer="adam", loss="mean_squared_error")
model.fit(X_train, y_train, epochs=50, batch_size=32)

test_data = prices_scaled[-window_size:]
test_data = np.reshape(test_data, (1, window_size, 1))
predicted_price = model.predict(test_data)
predicted_price = scaler.inverse_transform(predicted_price)

print(f": {predicted_price[0][0]:.2f} USD")





